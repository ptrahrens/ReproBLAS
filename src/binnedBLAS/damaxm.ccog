#include <stdlib.h>
#include <math.h>

#include "../config.h"
#include "../common/common.h"
#include "binnedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import amaxm
import vectorizations

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))
]]]*/
#if (defined(__AVX__) && !defined(reproBLAS_no__AVX__))
  #include <immintrin.h>

#elif (defined(__SSE2__) && !defined(reproBLAS_no__SSE2__))
  #include <emmintrin.h>

#else


#endif
//[[[end]]]

/**
 * @internal
 * @brief  Find maximum absolute value pairwise product between vectors of double precision
 *
 * Returns the absolute value of the pairwise product of maximum absolute value between X and Y.
 *
 * @param N vector length
 * @param X double precision vector
 * @param incX X vector stride (use every incX'th element)
 * @param Y double precision vector
 * @param incY Y vector stride (use every incY'th element)
 * @return absolute maximum value multiple of X and Y
 *
 * @author Willow Ahrens
 * @date   15 Jan 2016
 */
double binnedBLAS_damaxm(const int N, const double *X, const int incX, const double *Y, const int incY){
  double amaxm;
  /*[[[cog
  cog.out(generate.generate(amaxm.AMaxM(dataTypes.Double, "N", "X", "incX", "Y", "incY", "(&amaxm)"), cog.inFile, args, params, mode))
  ]]]*/
  #if (defined(__AVX__) && !defined(reproBLAS_no__AVX__))
    __m256d abs_mask_tmp;
    {
      __m256d tmp;
      tmp = _mm256_set1_pd(1);
      abs_mask_tmp = _mm256_set1_pd(-1);
      abs_mask_tmp = _mm256_xor_pd(abs_mask_tmp, tmp);
      tmp = _mm256_cmp_pd(tmp, tmp, 0);
      abs_mask_tmp = _mm256_xor_pd(abs_mask_tmp, tmp);
    }
    double max_buffer_tmp[4] __attribute__((aligned(32))); (void)max_buffer_tmp;

    int i;

    __m256d X_0, X_1, X_2, X_3, X_4, X_5, X_6;
    __m256d Y_0, Y_1, Y_2, Y_3, Y_4, Y_5, Y_6;
    __m256d m_0;
    m_0 = _mm256_setzero_pd();

    if(incX == 1 && incY == 1){

      for(i = 0; i + 28 <= N; i += 28, X += 28, Y += 28){
        X_0 = _mm256_loadu_pd(X);
        X_1 = _mm256_loadu_pd(X + 4);
        X_2 = _mm256_loadu_pd(X + 8);
        X_3 = _mm256_loadu_pd(X + 12);
        X_4 = _mm256_loadu_pd(X + 16);
        X_5 = _mm256_loadu_pd(X + 20);
        X_6 = _mm256_loadu_pd(X + 24);
        Y_0 = _mm256_loadu_pd(Y);
        Y_1 = _mm256_loadu_pd(Y + 4);
        Y_2 = _mm256_loadu_pd(Y + 8);
        Y_3 = _mm256_loadu_pd(Y + 12);
        Y_4 = _mm256_loadu_pd(Y + 16);
        Y_5 = _mm256_loadu_pd(Y + 20);
        Y_6 = _mm256_loadu_pd(Y + 24);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm256_and_pd(_mm256_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm256_and_pd(_mm256_mul_pd(X_3, Y_3), abs_mask_tmp);
        X_4 = _mm256_and_pd(_mm256_mul_pd(X_4, Y_4), abs_mask_tmp);
        X_5 = _mm256_and_pd(_mm256_mul_pd(X_5, Y_5), abs_mask_tmp);
        X_6 = _mm256_and_pd(_mm256_mul_pd(X_6, Y_6), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        m_0 = _mm256_max_pd(m_0, X_2);
        m_0 = _mm256_max_pd(m_0, X_3);
        m_0 = _mm256_max_pd(m_0, X_4);
        m_0 = _mm256_max_pd(m_0, X_5);
        m_0 = _mm256_max_pd(m_0, X_6);
      }
      if(i + 16 <= N){
        X_0 = _mm256_loadu_pd(X);
        X_1 = _mm256_loadu_pd(X + 4);
        X_2 = _mm256_loadu_pd(X + 8);
        X_3 = _mm256_loadu_pd(X + 12);
        Y_0 = _mm256_loadu_pd(Y);
        Y_1 = _mm256_loadu_pd(Y + 4);
        Y_2 = _mm256_loadu_pd(Y + 8);
        Y_3 = _mm256_loadu_pd(Y + 12);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm256_and_pd(_mm256_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm256_and_pd(_mm256_mul_pd(X_3, Y_3), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        m_0 = _mm256_max_pd(m_0, X_2);
        m_0 = _mm256_max_pd(m_0, X_3);
        i += 16, X += 16, Y += 16;
      }
      if(i + 8 <= N){
        X_0 = _mm256_loadu_pd(X);
        X_1 = _mm256_loadu_pd(X + 4);
        Y_0 = _mm256_loadu_pd(Y);
        Y_1 = _mm256_loadu_pd(Y + 4);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        i += 8, X += 8, Y += 8;
      }
      if(i + 4 <= N){
        X_0 = _mm256_loadu_pd(X);
        Y_0 = _mm256_loadu_pd(Y);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        i += 4, X += 4, Y += 4;
      }
      if(i < N){
        X_0 = _mm256_set_pd(0, (N - i)>2?X[2]:0, (N - i)>1?X[1]:0, X[0]);
        Y_0 = _mm256_set_pd(0, (N - i)>2?Y[2]:0, (N - i)>1?Y[1]:0, Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        X += (N - i), Y += (N - i);
      }
    }else{

      for(i = 0; i + 28 <= N; i += 28, X += (incX * 28), Y += (incY * 28)){
        X_0 = _mm256_set_pd(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
        X_1 = _mm256_set_pd(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)]);
        X_2 = _mm256_set_pd(X[(incX * 11)], X[(incX * 10)], X[(incX * 9)], X[(incX * 8)]);
        X_3 = _mm256_set_pd(X[(incX * 15)], X[(incX * 14)], X[(incX * 13)], X[(incX * 12)]);
        X_4 = _mm256_set_pd(X[(incX * 19)], X[(incX * 18)], X[(incX * 17)], X[(incX * 16)]);
        X_5 = _mm256_set_pd(X[(incX * 23)], X[(incX * 22)], X[(incX * 21)], X[(incX * 20)]);
        X_6 = _mm256_set_pd(X[(incX * 27)], X[(incX * 26)], X[(incX * 25)], X[(incX * 24)]);
        Y_0 = _mm256_set_pd(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
        Y_1 = _mm256_set_pd(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)]);
        Y_2 = _mm256_set_pd(Y[(incY * 11)], Y[(incY * 10)], Y[(incY * 9)], Y[(incY * 8)]);
        Y_3 = _mm256_set_pd(Y[(incY * 15)], Y[(incY * 14)], Y[(incY * 13)], Y[(incY * 12)]);
        Y_4 = _mm256_set_pd(Y[(incY * 19)], Y[(incY * 18)], Y[(incY * 17)], Y[(incY * 16)]);
        Y_5 = _mm256_set_pd(Y[(incY * 23)], Y[(incY * 22)], Y[(incY * 21)], Y[(incY * 20)]);
        Y_6 = _mm256_set_pd(Y[(incY * 27)], Y[(incY * 26)], Y[(incY * 25)], Y[(incY * 24)]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm256_and_pd(_mm256_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm256_and_pd(_mm256_mul_pd(X_3, Y_3), abs_mask_tmp);
        X_4 = _mm256_and_pd(_mm256_mul_pd(X_4, Y_4), abs_mask_tmp);
        X_5 = _mm256_and_pd(_mm256_mul_pd(X_5, Y_5), abs_mask_tmp);
        X_6 = _mm256_and_pd(_mm256_mul_pd(X_6, Y_6), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        m_0 = _mm256_max_pd(m_0, X_2);
        m_0 = _mm256_max_pd(m_0, X_3);
        m_0 = _mm256_max_pd(m_0, X_4);
        m_0 = _mm256_max_pd(m_0, X_5);
        m_0 = _mm256_max_pd(m_0, X_6);
      }
      if(i + 16 <= N){
        X_0 = _mm256_set_pd(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
        X_1 = _mm256_set_pd(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)]);
        X_2 = _mm256_set_pd(X[(incX * 11)], X[(incX * 10)], X[(incX * 9)], X[(incX * 8)]);
        X_3 = _mm256_set_pd(X[(incX * 15)], X[(incX * 14)], X[(incX * 13)], X[(incX * 12)]);
        Y_0 = _mm256_set_pd(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
        Y_1 = _mm256_set_pd(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)]);
        Y_2 = _mm256_set_pd(Y[(incY * 11)], Y[(incY * 10)], Y[(incY * 9)], Y[(incY * 8)]);
        Y_3 = _mm256_set_pd(Y[(incY * 15)], Y[(incY * 14)], Y[(incY * 13)], Y[(incY * 12)]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm256_and_pd(_mm256_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm256_and_pd(_mm256_mul_pd(X_3, Y_3), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        m_0 = _mm256_max_pd(m_0, X_2);
        m_0 = _mm256_max_pd(m_0, X_3);
        i += 16, X += (incX * 16), Y += (incY * 16);
      }
      if(i + 8 <= N){
        X_0 = _mm256_set_pd(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
        X_1 = _mm256_set_pd(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)]);
        Y_0 = _mm256_set_pd(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
        Y_1 = _mm256_set_pd(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm256_and_pd(_mm256_mul_pd(X_1, Y_1), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        m_0 = _mm256_max_pd(m_0, X_1);
        i += 8, X += (incX * 8), Y += (incY * 8);
      }
      if(i + 4 <= N){
        X_0 = _mm256_set_pd(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
        Y_0 = _mm256_set_pd(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        i += 4, X += (incX * 4), Y += (incY * 4);
      }
      if(i < N){
        X_0 = _mm256_set_pd(0, (N - i)>2?X[(incX * 2)]:0, (N - i)>1?X[incX]:0, X[0]);
        Y_0 = _mm256_set_pd(0, (N - i)>2?Y[(incY * 2)]:0, (N - i)>1?Y[incY]:0, Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        X += (incX * (N - i)), Y += (incY * (N - i));
      }
    }
    _mm256_store_pd(max_buffer_tmp, m_0);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[1] ? max_buffer_tmp[0]: max_buffer_tmp[1]);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[2] ? max_buffer_tmp[0]: max_buffer_tmp[2]);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[3] ? max_buffer_tmp[0]: max_buffer_tmp[3]);
    (&amaxm)[0] = max_buffer_tmp[0];

  #elif (defined(__SSE2__) && !defined(reproBLAS_no__SSE2__))
    __m128d abs_mask_tmp;
    {
      __m128d tmp;
      tmp = _mm_set1_pd(1);
      abs_mask_tmp = _mm_set1_pd(-1);
      abs_mask_tmp = _mm_xor_pd(abs_mask_tmp, tmp);
      tmp = _mm_cmpeq_pd(tmp, tmp);
      abs_mask_tmp = _mm_xor_pd(abs_mask_tmp, tmp);
    }
    double max_buffer_tmp[2] __attribute__((aligned(16))); (void)max_buffer_tmp;

    int i;

    __m128d X_0, X_1, X_2, X_3;
    __m128d Y_0, Y_1, Y_2, Y_3;
    __m128d m_0;
    m_0 = _mm_setzero_pd();

    if(incX == 1 && incY == 1){

      for(i = 0; i + 8 <= N; i += 8, X += 8, Y += 8){
        X_0 = _mm_loadu_pd(X);
        X_1 = _mm_loadu_pd(X + 2);
        X_2 = _mm_loadu_pd(X + 4);
        X_3 = _mm_loadu_pd(X + 6);
        Y_0 = _mm_loadu_pd(Y);
        Y_1 = _mm_loadu_pd(Y + 2);
        Y_2 = _mm_loadu_pd(Y + 4);
        Y_3 = _mm_loadu_pd(Y + 6);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm_and_pd(_mm_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm_and_pd(_mm_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm_and_pd(_mm_mul_pd(X_3, Y_3), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        m_0 = _mm_max_pd(m_0, X_1);
        m_0 = _mm_max_pd(m_0, X_2);
        m_0 = _mm_max_pd(m_0, X_3);
      }
      if(i + 4 <= N){
        X_0 = _mm_loadu_pd(X);
        X_1 = _mm_loadu_pd(X + 2);
        Y_0 = _mm_loadu_pd(Y);
        Y_1 = _mm_loadu_pd(Y + 2);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm_and_pd(_mm_mul_pd(X_1, Y_1), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        m_0 = _mm_max_pd(m_0, X_1);
        i += 4, X += 4, Y += 4;
      }
      if(i + 2 <= N){
        X_0 = _mm_loadu_pd(X);
        Y_0 = _mm_loadu_pd(Y);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        i += 2, X += 2, Y += 2;
      }
      if(i < N){
        X_0 = _mm_set_pd(0, X[0]);
        Y_0 = _mm_set_pd(0, Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        X += (N - i), Y += (N - i);
      }
    }else{

      for(i = 0; i + 8 <= N; i += 8, X += (incX * 8), Y += (incY * 8)){
        X_0 = _mm_set_pd(X[incX], X[0]);
        X_1 = _mm_set_pd(X[(incX * 3)], X[(incX * 2)]);
        X_2 = _mm_set_pd(X[(incX * 5)], X[(incX * 4)]);
        X_3 = _mm_set_pd(X[(incX * 7)], X[(incX * 6)]);
        Y_0 = _mm_set_pd(Y[incY], Y[0]);
        Y_1 = _mm_set_pd(Y[(incY * 3)], Y[(incY * 2)]);
        Y_2 = _mm_set_pd(Y[(incY * 5)], Y[(incY * 4)]);
        Y_3 = _mm_set_pd(Y[(incY * 7)], Y[(incY * 6)]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm_and_pd(_mm_mul_pd(X_1, Y_1), abs_mask_tmp);
        X_2 = _mm_and_pd(_mm_mul_pd(X_2, Y_2), abs_mask_tmp);
        X_3 = _mm_and_pd(_mm_mul_pd(X_3, Y_3), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        m_0 = _mm_max_pd(m_0, X_1);
        m_0 = _mm_max_pd(m_0, X_2);
        m_0 = _mm_max_pd(m_0, X_3);
      }
      if(i + 4 <= N){
        X_0 = _mm_set_pd(X[incX], X[0]);
        X_1 = _mm_set_pd(X[(incX * 3)], X[(incX * 2)]);
        Y_0 = _mm_set_pd(Y[incY], Y[0]);
        Y_1 = _mm_set_pd(Y[(incY * 3)], Y[(incY * 2)]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        X_1 = _mm_and_pd(_mm_mul_pd(X_1, Y_1), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        m_0 = _mm_max_pd(m_0, X_1);
        i += 4, X += (incX * 4), Y += (incY * 4);
      }
      if(i + 2 <= N){
        X_0 = _mm_set_pd(X[incX], X[0]);
        Y_0 = _mm_set_pd(Y[incY], Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        i += 2, X += (incX * 2), Y += (incY * 2);
      }
      if(i < N){
        X_0 = _mm_set_pd(0, X[0]);
        Y_0 = _mm_set_pd(0, Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        X += (incX * (N - i)), Y += (incY * (N - i));
      }
    }
    _mm_store_pd(max_buffer_tmp, m_0);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[1] ? max_buffer_tmp[0]: max_buffer_tmp[1]);
    (&amaxm)[0] = max_buffer_tmp[0];

  #else
    int i;

    double X_0;
    double Y_0;
    double m_0;
    m_0 = 0;

    if(incX == 1 && incY == 1){

      for(i = 0; i + 1 <= N; i += 1, X += 1, Y += 1){
        X_0 = X[0];
        Y_0 = Y[0];
        X_0 = fabs((X_0 * Y_0));
        m_0 = (m_0 > X_0? m_0: X_0);
      }
    }else{

      for(i = 0; i + 1 <= N; i += 1, X += incX, Y += incY){
        X_0 = X[0];
        Y_0 = Y[0];
        X_0 = fabs((X_0 * Y_0));
        m_0 = (m_0 > X_0? m_0: X_0);
      }
    }
    (&amaxm)[0] = m_0;

  #endif
  //[[[end]]]
  return amaxm;
}

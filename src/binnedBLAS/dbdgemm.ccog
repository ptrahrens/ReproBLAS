#include <stdlib.h>

#include "../common/common.h"
#include "binnedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
from src.common import blockSize
from scripts import terminal

rounded_cache = 2**(int(terminal.get_cache()).bit_length() - 1)
xy_block = rounded_cache//dataTypes.Double.byte_size
y_block = max(xy_block//256, 1)

cog.out(generate.generate(blockSize.BlockSize("dbdgemm", "Y_BLOCK", 1, y_block, y_block, ["bench_rdgemm_AvgTransA_AvgTransB_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("dbdgemm", "XY_BLOCK", y_block, xy_block, xy_block, ["bench_rdgemm_AvgTransA_AvgTransB_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("dbdgemm", "YT_BLOCK", 1, y_block, y_block, ["bench_rdgemm_AvgTransA_AvgTransB_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("dbdgemm", "XYT_BLOCK", y_block, xy_block, xy_block, ["bench_rdgemm_AvgTransA_AvgTransB_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#define Y_BLOCK 32
#define XY_BLOCK 32768
#define YT_BLOCK 32
#define XYT_BLOCK 32768
//[[[end]]]
#define X_BLOCK (XY_BLOCK/Y_BLOCK)
#define XT_BLOCK (XYT_BLOCK/YT_BLOCK)

/**
 * @brief Add to binned double precision matrix C the matrix-matrix product of double precision matrices A and B
 *
 * Performs one of the matrix-matrix operations
 *
 *   C := alpha*op(A)*op(B) + C,
 *
 * where op(X) is one of
 *
 *   op(X) = X   or   op(X) = X**T,
 *
 * alpha is a scalar, A and B are matrices with op(A) an M by K matrix and op(B) a K by N matrix, and C is an binned M by N matrix.
 *
 * @param fold the fold of the binned types
 * @param Order a character specifying the matrix ordering ('r' or 'R' for row-major, 'c' or 'C' for column major)
 * @param TransA a character specifying whether or not to transpose A before taking the matrix-matrix product ('n' or 'N' not to transpose, 't' or 'T' or 'c' or 'C' to transpose)
 * @param TransB a character specifying whether or not to transpose B before taking the matrix-matrix product ('n' or 'N' not to transpose, 't' or 'T' or 'c' or 'C' to transpose)
 * @param M number of rows of matrix op(A) and of the matrix C.
 * @param N number of columns of matrix op(B) and of the matrix C.
 * @param K number of columns of matrix op(A) and columns of the matrix op(B).
 * @param alpha scalar alpha
 * @param A double precision matrix of dimension (ma, lda) in row-major or (lda, na) in column-major. (ma, na) is (M, K) if A is not transposed and (K, M) otherwise.
 * @param lda the first dimension of A as declared in the calling program. lda must be at least na in row major or ma in column major.
 * @param B double precision matrix of dimension (mb, ldb) in row-major or (ldb, nb) in column-major. (mb, nb) is (K, N) if B is not transposed and (N, K) otherwise.
 * @param ldb the first dimension of B as declared in the calling program. ldb must be at least nb in row major or mb in column major.
 * @param C binned double precision matrix of dimension (M, ldc) in row-major or (ldc, N) in column-major.
 * @param ldc the first dimension of C as declared in the calling program. ldc must be at least N in row major or M in column major.
 *
 * @author Willow Ahrens
 * @date   18 Jan 2016
 */
void binnedBLAS_dbdgemm(const int fold, const char Order,
             const char TransA, const char TransB,
             const int M, const int N, const int K,
             const double alpha, const double *A, const int lda,
             const double *B, const int ldb,
             double_binned *C, const int ldc){
  int i;
  int ii;
  int k;
  int kk;
  int j;
  int jj;
  double *bufA;
  int ldbufa;
  double *bufB;

  //early returns
  if(M == 0 || N == 0 || K == 0 || alpha == 0.0){
    return;
  }

  switch(Order){

    //row major
    case 'r':
    case 'R':
      switch(TransA){

        //row major A not transposed
        case 'n':
        case 'N':
          if(alpha == 1.0){
            bufA = (double*)A;
            ldbufa = lda;
          }else{
            bufA = (double*)malloc(M * K * sizeof(double));
            for(i = 0; i < M; i++){
              for(k = 0; k < K; k++){
                bufA[i * K + k] = A[i * lda + k] * alpha;
              }
            }
            ldbufa = K;
          }
          switch(TransB){

            //row major A not transposed B not transposed
            case 'n':
            case 'N':
              bufB = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += YT_BLOCK){
                  for(k = 0; k < K; k += XT_BLOCK){
                    for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                      }
                    }
                    for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + ii * ldbufa + k, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                      }
                    }
                  }
                }
              }
              free(bufB);
              break;

            //row major A not transposed B transposed
            default:
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += Y_BLOCK){
                  for(k = 0; k < K; k += X_BLOCK){
                    for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        binnedBLAS_dbddot(fold, MIN(X_BLOCK, K - k), bufA + ii * ldbufa + k, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                      }
                    }
                  }
                }
              }
              break;

          }
          if(alpha != 1.0){
            free(bufA);
          }
          break;

        //row major A transposed
        default:
          switch(TransB){

            //row major A transposed B not transposed
            case 'n':
            case 'N':
              bufA = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              bufB = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              free(bufB);
              break;

            //row major A transposed B transposed
            default:
              bufA = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              break;
          }
          break;
      }
      break;

    //column major
    default:
      switch(TransA){

        //column major A not transposed
        case 'n':
        case 'N':
          switch(TransB){

            //column major A not transposed B not transposed
            case 'n':
            case 'N':
              bufA = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              break;

            //column major A not transposed B transposed
            default:
              bufA = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              bufB = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              free(bufB);
              break;
          }
          break;

        //column major A transposed
        default:
          if(alpha == 1.0){
            bufA = (double*)A;
            ldbufa = lda;
          }else{
            bufA = (double*)malloc(M * K * sizeof(double));
            for(i = 0; i < M; i++){
              for(k = 0; k < K; k++){
                bufA[i * K + k] = A[i * lda + k] * alpha;
              }
            }
            ldbufa = K;
          }
          switch(TransB){

            //column major A transposed B not transposed
            case 'n':
            case 'N':
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += Y_BLOCK){
                  for(k = 0; k < K; k += X_BLOCK){
                    for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                      for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                        binnedBLAS_dbddot(fold, MIN(X_BLOCK, K - k), bufA + ii * ldbufa + k, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                      }
                    }
                  }
                }
              }
              break;

            //column major A transposed B transposed
            default:
              bufB = (double*)malloc(XT_BLOCK * YT_BLOCK * sizeof(double));
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += YT_BLOCK){
                  for(k = 0; k < K; k += XT_BLOCK){
                    for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                      }
                    }
                    for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                      for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                        binnedBLAS_dbddot(fold, MIN(XT_BLOCK, K - k), bufA + ii * ldbufa + k, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * binned_dbnum(fold));
                      }
                    }
                  }
                }
              }
              free(bufB);
              break;
          }
          if(alpha != 1.0){
            free(bufA);
          }
          break;
      }
      break;
  }
}

#include <mpi.h>
#include <stdio.h>

#include <binned.h>
#include <binnedMPI.h>

#include <../config.h>

/*[[[cog
import cog
from scripts import terminal
for fold in range(2, terminal.get_simaxindex() + 1):
  cog.outl("static void binnedMPI_cbcbadd_{}(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){{".format(fold))
  cog.outl("  binned_cbcbaddv({}, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);".format(fold))
  cog.outl("}")
  cog.outl("")
]]]*/
static void binnedMPI_cbcbadd_2(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(2, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_3(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(3, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_4(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(4, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_5(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(5, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_6(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(6, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_7(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(7, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_8(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(8, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_9(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(9, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_10(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(10, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_11(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(11, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_12(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(12, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_13(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(13, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_14(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(14, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_15(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(15, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_16(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(16, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_17(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(17, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_18(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(18, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_19(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(19, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

static void binnedMPI_cbcbadd_20(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_cbcbaddv(20, *len, (float_complex_binned*)invec, 1, (float_complex_binned*)inoutvec, 1);
}

//[[[end]]]

static MPI_Op ops[binned_SBMAXFOLD + 1];
static int ops_initialized[binned_SBMAXFOLD + 1]; //initializes to 0

/**
 * @brief  Get an MPI_OP to add binned complex single precision (Y += X)
 *
 * Creates (if it has not already been created) and returns a function handle
 * for an MPI reduction operation that performs the operation Y += X on two
 * arrays of binned complex single precision datatypes of the specified fold.
 * An MPI datatype handle can be created for such a datatype with
 * #binnedMPI_FLOAT_COMPLEX_BINNED.
 *
 * This method may call @c MPI_Op_create().
 * If there is an error, this method will call @c MPI_Abort().
 *
 * @param fold the fold of the binned types
 *
 * @author Willow Ahrens
 * @date   18 Jun 2016
 */
MPI_Op binnedMPI_CBCBADD(const int fold){
  int rc;
  if(!ops_initialized[fold]){
    switch(fold){
      /*[[[cog
      import cog
      from scripts import terminal
      for fold in range(2, terminal.get_simaxindex() + 1):
        cog.outl("case {}:".format(fold))
        cog.outl("  rc = MPI_Op_create(&binnedMPI_cbcbadd_{0}, 1, ops + {0});".format(fold))
        cog.outl("  break;")
        cog.outl("")
      ]]]*/
      case 2:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_2, 1, ops + 2);
        break;

      case 3:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_3, 1, ops + 3);
        break;

      case 4:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_4, 1, ops + 4);
        break;

      case 5:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_5, 1, ops + 5);
        break;

      case 6:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_6, 1, ops + 6);
        break;

      case 7:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_7, 1, ops + 7);
        break;

      case 8:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_8, 1, ops + 8);
        break;

      case 9:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_9, 1, ops + 9);
        break;

      case 10:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_10, 1, ops + 10);
        break;

      case 11:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_11, 1, ops + 11);
        break;

      case 12:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_12, 1, ops + 12);
        break;

      case 13:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_13, 1, ops + 13);
        break;

      case 14:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_14, 1, ops + 14);
        break;

      case 15:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_15, 1, ops + 15);
        break;

      case 16:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_16, 1, ops + 16);
        break;

      case 17:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_17, 1, ops + 17);
        break;

      case 18:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_18, 1, ops + 18);
        break;

      case 19:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_19, 1, ops + 19);
        break;

      case 20:
        rc = MPI_Op_create(&binnedMPI_cbcbadd_20, 1, ops + 20);
        break;

      //[[[end]]]
    }
    if(rc != MPI_SUCCESS){
      fprintf(stderr, "[%s.%d] ReproBLAS error: MPI_Op_create error: %d\n", __FILE__, __LINE__, rc);
      MPI_Abort(MPI_COMM_WORLD, rc);
      return 0;
    }
    ops_initialized[fold] = 1;
  }
  return ops[fold];
}

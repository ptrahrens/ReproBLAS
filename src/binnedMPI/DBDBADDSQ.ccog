#include <mpi.h>
#include <stdio.h>

#include <binned.h>
#include <binnedMPI.h>

#include <../config.h>

static inline void dbdbaddsqv(const int fold, const int N, const double *X, double *Y){
  int i;
  for(i = 0; i < N; i++, X += binned_dbnum(fold) + 1, Y += binned_dbnum(fold) + 1){
    binned_dmdmaddsq(fold, X[0], (double_binned*)(X + 1), 1, (double_binned*)(X + 1 + fold), 1, Y[0], (double_binned*)(Y + 1), 1, (double_binned*)(Y + 1 + fold), 1);
  }
}

/*[[[cog
import cog
from scripts import terminal
for fold in range(2, terminal.get_dimaxindex() + 1):
  cog.outl("static void binnedMPI_dbdbaddsq_{}(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){{".format(fold))
  cog.outl("  dbdbaddsqv({}, *len, (double*)invec, (double*)inoutvec);".format(fold))
  cog.outl("}")
  cog.outl("")
]]]*/
static void binnedMPI_dbdbaddsq_2(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(2, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_3(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(3, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_4(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(4, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_5(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(5, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_6(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(6, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_7(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(7, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_8(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(8, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_9(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(9, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_10(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(10, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_11(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(11, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_12(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(12, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_13(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(13, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_14(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(14, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_15(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(15, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_16(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(16, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_17(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(17, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_18(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(18, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_19(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(19, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_20(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(20, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_21(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(21, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_22(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(22, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_23(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(23, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_24(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(24, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_25(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(25, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_26(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(26, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_27(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(27, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_28(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(28, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_29(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(29, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_30(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(30, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_31(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(31, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_32(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(32, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_33(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(33, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_34(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(34, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_35(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(35, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_36(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(36, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_37(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(37, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_38(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(38, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_39(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(39, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_40(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(40, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_41(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(41, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_42(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(42, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_43(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(43, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_44(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(44, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_45(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(45, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_46(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(46, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_47(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(47, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_48(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(48, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_49(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(49, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_50(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(50, *len, (double*)invec, (double*)inoutvec);
}

static void binnedMPI_dbdbaddsq_51(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  dbdbaddsqv(51, *len, (double*)invec, (double*)inoutvec);
}

//[[[end]]]

static MPI_Op ops[binned_DBMAXFOLD + 1];
static int ops_initialized[binned_DBMAXFOLD + 1]; //initializes to 0

/**
 * @brief  Get an MPI_OP to add binned double precision scaled sums of squares
 * (Y += X)
 *
 * Creates (if it has not already been created) and returns a function handle
 * for an MPI reduction operation that performs the operation Y += X where X and
 * Y represent scaled sums of squares on two arrays of scaled binned double
 * precision datatypes of the specified fold.
 * An MPI datatype handle can be created for such a datatype with
 * #binnedMPI_DOUBLE_BINNED_SCALED.
 *
 * This method may call @c MPI_Op_create().
 * If there is an error, this method will call @c MPI_Abort().
 *
 * @param fold the fold of the binned types
 *
 * @author Willow Ahrens
 * @date   18 Jun 2016
 */
MPI_Op binnedMPI_DBDBADDSQ(const int fold){
  int rc;
  if(!ops_initialized[fold]){
    switch(fold){
      /*[[[cog
      import cog
      from scripts import terminal
      for fold in range(2, terminal.get_dimaxindex() + 1):
        cog.outl("case {}:".format(fold))
        cog.outl("  rc = MPI_Op_create(&binnedMPI_dbdbaddsq_{0}, 1, ops + {0});".format(fold))
        cog.outl("  break;")
        cog.outl("")
      ]]]*/
      case 2:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_2, 1, ops + 2);
        break;

      case 3:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_3, 1, ops + 3);
        break;

      case 4:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_4, 1, ops + 4);
        break;

      case 5:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_5, 1, ops + 5);
        break;

      case 6:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_6, 1, ops + 6);
        break;

      case 7:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_7, 1, ops + 7);
        break;

      case 8:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_8, 1, ops + 8);
        break;

      case 9:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_9, 1, ops + 9);
        break;

      case 10:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_10, 1, ops + 10);
        break;

      case 11:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_11, 1, ops + 11);
        break;

      case 12:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_12, 1, ops + 12);
        break;

      case 13:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_13, 1, ops + 13);
        break;

      case 14:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_14, 1, ops + 14);
        break;

      case 15:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_15, 1, ops + 15);
        break;

      case 16:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_16, 1, ops + 16);
        break;

      case 17:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_17, 1, ops + 17);
        break;

      case 18:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_18, 1, ops + 18);
        break;

      case 19:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_19, 1, ops + 19);
        break;

      case 20:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_20, 1, ops + 20);
        break;

      case 21:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_21, 1, ops + 21);
        break;

      case 22:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_22, 1, ops + 22);
        break;

      case 23:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_23, 1, ops + 23);
        break;

      case 24:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_24, 1, ops + 24);
        break;

      case 25:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_25, 1, ops + 25);
        break;

      case 26:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_26, 1, ops + 26);
        break;

      case 27:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_27, 1, ops + 27);
        break;

      case 28:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_28, 1, ops + 28);
        break;

      case 29:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_29, 1, ops + 29);
        break;

      case 30:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_30, 1, ops + 30);
        break;

      case 31:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_31, 1, ops + 31);
        break;

      case 32:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_32, 1, ops + 32);
        break;

      case 33:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_33, 1, ops + 33);
        break;

      case 34:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_34, 1, ops + 34);
        break;

      case 35:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_35, 1, ops + 35);
        break;

      case 36:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_36, 1, ops + 36);
        break;

      case 37:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_37, 1, ops + 37);
        break;

      case 38:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_38, 1, ops + 38);
        break;

      case 39:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_39, 1, ops + 39);
        break;

      case 40:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_40, 1, ops + 40);
        break;

      case 41:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_41, 1, ops + 41);
        break;

      case 42:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_42, 1, ops + 42);
        break;

      case 43:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_43, 1, ops + 43);
        break;

      case 44:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_44, 1, ops + 44);
        break;

      case 45:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_45, 1, ops + 45);
        break;

      case 46:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_46, 1, ops + 46);
        break;

      case 47:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_47, 1, ops + 47);
        break;

      case 48:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_48, 1, ops + 48);
        break;

      case 49:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_49, 1, ops + 49);
        break;

      case 50:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_50, 1, ops + 50);
        break;

      case 51:
        rc = MPI_Op_create(&binnedMPI_dbdbaddsq_51, 1, ops + 51);
        break;

      //[[[end]]]
    }
    if(rc != MPI_SUCCESS){
      fprintf(stderr, "[%s.%d] ReproBLAS error: MPI_Op_create error: %d\n", __FILE__, __LINE__, rc);
      MPI_Abort(MPI_COMM_WORLD, rc);
      return 0;
    }
    ops_initialized[fold] = 1;
  }
  return ops[fold];
}

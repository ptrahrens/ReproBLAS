#include <mpi.h>
#include <stdio.h>

#include <binned.h>

#include <../config.h>

/*[[[cog
import cog
from scripts import terminal
for fold in range(2, terminal.get_dimaxindex() + 1):
  cog.outl("static void binnedMPI_zbzbadd_{}(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){{".format(fold))
  cog.outl("  binned_dbdbaddv({}, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);".format(fold))
  cog.outl("}")
  cog.outl("")
]]]*/
static void binnedMPI_zbzbadd_2(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(2, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_3(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(3, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_4(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(4, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_5(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(5, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_6(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(6, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_7(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(7, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_8(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(8, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_9(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(9, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_10(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(10, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_11(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(11, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_12(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(12, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_13(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(13, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_14(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(14, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_15(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(15, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_16(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(16, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_17(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(17, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_18(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(18, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_19(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(19, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_20(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(20, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_21(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(21, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_22(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(22, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_23(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(23, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_24(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(24, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_25(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(25, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_26(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(26, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_27(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(27, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_28(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(28, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_29(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(29, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_30(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(30, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_31(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(31, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_32(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(32, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_33(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(33, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_34(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(34, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_35(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(35, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_36(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(36, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_37(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(37, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_38(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(38, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_39(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(39, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_40(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(40, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_41(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(41, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_42(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(42, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_43(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(43, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_44(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(44, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_45(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(45, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_46(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(46, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_47(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(47, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_48(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(48, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_49(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(49, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_50(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(50, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

static void binnedMPI_zbzbadd_51(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  binned_dbdbaddv(51, *len, (double_complex_binned*)invec, 1, (double_complex_binned*)inoutvec, 1);
}

//[[[end]]]

static MPI_Op ops[binned_DBMAXFOLD + 1];
static int ops_initialized[binned_DBMAXFOLD + 1]; //initializes to 0

/**
 * @brief  Get an MPI_OP to add binned complex double precision (Y += X)
 *
 * Creates (if it has not already been created) and returns a function handle
 * for an MPI reduction operation that performs the operation Y += X on two
 * arrays of binned complex double precision datatypes of the specified fold.
 * An MPI datatype handle can be created for such a datatype with
 * #binnedMPI_DOUBLE_COMPLEX_BINNED.
 *
 * This method may call @c MPI_Op_create().
 * If there is an error, this method will call @c MPI_Abort().
 *
 * @param fold the fold of the binned types
 *
 * @author Willow Ahrens
 * @date   18 Jun 2016
 */
MPI_Op binnedMPI_ZBZBADD(const int fold){
  int rc;
  if(!ops_initialized[fold]){
    switch(fold){
      /*[[[cog
      import cog
      from scripts import terminal
      for fold in range(2, terminal.get_dimaxindex() + 1):
        cog.outl("case {}:".format(fold))
        cog.outl("  rc = MPI_Op_create(&binnedMPI_zbzbadd_{0}, 1, ops + {0});".format(fold))
        cog.outl("  break;")
        cog.outl("")
      ]]]*/
      case 2:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_2, 1, ops + 2);
        break;

      case 3:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_3, 1, ops + 3);
        break;

      case 4:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_4, 1, ops + 4);
        break;

      case 5:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_5, 1, ops + 5);
        break;

      case 6:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_6, 1, ops + 6);
        break;

      case 7:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_7, 1, ops + 7);
        break;

      case 8:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_8, 1, ops + 8);
        break;

      case 9:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_9, 1, ops + 9);
        break;

      case 10:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_10, 1, ops + 10);
        break;

      case 11:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_11, 1, ops + 11);
        break;

      case 12:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_12, 1, ops + 12);
        break;

      case 13:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_13, 1, ops + 13);
        break;

      case 14:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_14, 1, ops + 14);
        break;

      case 15:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_15, 1, ops + 15);
        break;

      case 16:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_16, 1, ops + 16);
        break;

      case 17:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_17, 1, ops + 17);
        break;

      case 18:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_18, 1, ops + 18);
        break;

      case 19:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_19, 1, ops + 19);
        break;

      case 20:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_20, 1, ops + 20);
        break;

      case 21:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_21, 1, ops + 21);
        break;

      case 22:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_22, 1, ops + 22);
        break;

      case 23:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_23, 1, ops + 23);
        break;

      case 24:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_24, 1, ops + 24);
        break;

      case 25:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_25, 1, ops + 25);
        break;

      case 26:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_26, 1, ops + 26);
        break;

      case 27:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_27, 1, ops + 27);
        break;

      case 28:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_28, 1, ops + 28);
        break;

      case 29:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_29, 1, ops + 29);
        break;

      case 30:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_30, 1, ops + 30);
        break;

      case 31:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_31, 1, ops + 31);
        break;

      case 32:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_32, 1, ops + 32);
        break;

      case 33:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_33, 1, ops + 33);
        break;

      case 34:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_34, 1, ops + 34);
        break;

      case 35:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_35, 1, ops + 35);
        break;

      case 36:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_36, 1, ops + 36);
        break;

      case 37:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_37, 1, ops + 37);
        break;

      case 38:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_38, 1, ops + 38);
        break;

      case 39:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_39, 1, ops + 39);
        break;

      case 40:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_40, 1, ops + 40);
        break;

      case 41:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_41, 1, ops + 41);
        break;

      case 42:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_42, 1, ops + 42);
        break;

      case 43:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_43, 1, ops + 43);
        break;

      case 44:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_44, 1, ops + 44);
        break;

      case 45:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_45, 1, ops + 45);
        break;

      case 46:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_46, 1, ops + 46);
        break;

      case 47:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_47, 1, ops + 47);
        break;

      case 48:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_48, 1, ops + 48);
        break;

      case 49:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_49, 1, ops + 49);
        break;

      case 50:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_50, 1, ops + 50);
        break;

      case 51:
        rc = MPI_Op_create(&binnedMPI_zbzbadd_51, 1, ops + 51);
        break;

      //[[[end]]]
    }
    if(rc != MPI_SUCCESS){
      fprintf(stderr, "[%s.%d] ReproBLAS error: MPI_Op_create error: %d\n", __FILE__, __LINE__, rc);
      MPI_Abort(MPI_COMM_WORLD, rc);
      return 0;
    }
    ops_initialized[fold] = 1;
  }
  return ops[fold];
}
